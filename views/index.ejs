<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=Âµ, initial-scale=1.0">
    <title>Toren kraan</title>
    <link rel="stylesheet" href="/styles/style.css">
</head>
<body>
    <h1>Toren kraan</h1>
    <div class="mainWrapper">
        <div id="topdownWrapper" class="viewWrappers">
            <button onclick="stop()" id="stop">Stop</button>
            <button onclick="turnCW()">Turn CW</button>
            <button onclick="turnCCW()">Turn CCW</button>
            <div class="canvasWrapper">
                <canvas id="topdown" width="400" height="400"></canvas>
                <label for="topdown" id="topdownLabel">Topdown</label>
            </div>
        </div>
        <div id="sideWrapper" class="viewWrappers">
            <button onclick="further()">Further</button>
            <div class="canvasWrapper">
                <canvas id="side" width="400" height="400"></canvas>
                <label for="side" id="sideLabel">Sideview</label>
            </div>
        </div>

    </div>
    
    <script>
        const canvas = document.getElementById("topdown")
        const ctx = canvas.getContext("2d")
        const sideView = document.getElementById("side")
        const sideCtx = sideView.getContext("2d")
        let position = [0.6, 0, 0.5]        // x, y, z
        let radius = 0.6
        let turnSpeed = 0.01
        let angle = 0
        drawLine(ctx, [200, 200], [200 + position[0] * 200, 200 + position[1] * 200])
        drawLine(sideCtx, [100, 100], [300, 100])
        drawLine(sideCtx, [299, 99], [300, 500])
        drawLine(sideCtx, [100 + radius * 333, 100], [100 + radius * 333, position[2] * 200])
        let isTurningCW = false
        let isTurningCCW = false

        async function turnCW(){
            if(isTurningCCW == false) isTurningCW = true
            while(isTurningCW == true && isTurningCCW == false){
                angle = Math.atan2(position[1], position[0]) + turnSpeed
                position[0] = Math.cos(angle) * radius
                position[1] = Math.sin(angle) * radius
                clearCanvas(ctx)
                await drawLine(ctx, [200, 200], [200 + position[0] *200, 200 + position[1] * 200])
                await sleep(100)
            }
        }

        async function turnCCW(){
            if(isTurningCW == false) isTurningCCW = true
            while(isTurningCCW == true && isTurningCW == false){
                angle = Math.atan2(position[1], position[0]) - turnSpeed
                position[0] = Math.cos(angle) * radius
                position[1] = Math.sin(angle) * radius
                clearCanvas(ctx)
                await drawLine(ctx, [200, 200], [200 + position[0] * 200, 200 + position[1] * 200])
                await sleep(100)
            }
        }

        async function further(){
            
        }

        function stop(){
            isTurningCW = false
            isTurningCCW = false
        }

        function drawLine(ctx, begin, end, stroke = "white", width = 3){
            if (stroke) {
                ctx.strokeStyle = stroke;
            }

            if (width) {
                ctx.lineWidth = width;
            }

            ctx.beginPath();
            ctx.moveTo(...begin);
            ctx.lineTo(...end);
            ctx.stroke();
        }

        function clearCanvas(ctx){
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    </script>
</body>
</html>